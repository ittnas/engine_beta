The components of program, starting from the user-level

1. MAIN PROGRAM
This runs the graphics engine. For example, this can be a game. Uses SCENEs utility methods to create content to the world.
 
2. SCENE contains WORLDs and CAMERAs. Each CAMERA has one world attached to it, and it shows its own view of it. The output of a camera is some buffer (i. e. Framebuffer). Each camera has to feed its data to some buffer (preferably a different one for each of them).

3. WORLD is an independent instance, and it implements the physics and other interactions, which are preconditioned. Contents of the world is created in the SCENE, and then added to the world. WORLD contains the rendering functionality, LIGHT_MANAGER, OBJECT_MANAGER etc. The flow of the world is controlled by ACTIONs, generated by the scene, or the inner mechanics of the WORLD.

4. CAMERA represents the view of the WORLD. It contains its own position and orientation inside the WORLD it is attached to. From these it constructs the VIEW_MATRIX, which is passed to the shader. Propably CAMERA should also handle the PROJECTION_MATRIX.

5. OBJECTS populate the world, and contain all the data displayd. The also handle the interface between the GPU and the CPU. OBJECTs contain MODULEs, which all implement a certain functionality of the OBJECT. MODULEs handle the data connected to their functionality. Requirement for the OBJECT are: It has to contain the MODULEs required by the PROGRAM attached to it. Similarly, the OBJECT has to contain PROGRAMs required to render it; All the OBJECTs in the object hierarchy have to implement the interface required by the RENDERER.

6. RENDERER draws the OBJECT hierarcy. All the OBJECTs have to belong to some RENDERER, otherwise they don't get drawn. RENDERER performs the different effects, and they may invoke different set of programs in order to achieve varying effects. One SHADOW_RENDERER might, for example, draw shadows normally, while the other also draws the shadow volumes (i.e. uses a different set of shaders for rendering).
