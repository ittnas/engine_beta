#ifndef WORLD_HPP
#define WORLD_HPP

#include <forward_list>

#include "object.hpp"
#include "projection_buffer.hpp"
#include "camera.hpp"
#include "light_manager.hpp"
#include "manager.hpp"

class World : public Object {
private:
  GLfloat inf;
  ProjectionBuffer * projection_buffer;
  static std::forward_list<World *> worlds;
  std::forward_list<Camera *> cameras;
  std::forward_list<Manager *> managers;

  //void execute_drawing(GLint tick, GLuint render_flag = -1, GLuint current_program = 0, Comparator comp = OR);
public:
  World();
  virtual ~World();
  void set_infinity(GLfloat infinity) {this->inf = infinity;}
  void set_projection(glm::mat4 projection_matrix);
  void register_object(Object *) {} //TODO. Lightmanager needs this
  void deregister_object(Object *) {} //TODO
  // When registering, call all the buffers to allow them register the object. Maybe. Cameras need to be registered, too.
  static void action_on_worlds(GLuint tick);
  void draw_world(GLint tick, GLuint render_flag = -1, GLuint current_program = 0, Comparator comp = OR);
};

#endif
