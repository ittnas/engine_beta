#include "world.hpp"
#include "object.hpp"
#include "projection_buffer.hpp"

std::forward_list<World*> World::worlds;

World::World() : Object(), inf(100.0) {
  worlds.push_front(this);
  this->set_world(this);
  try {
    this->projection_buffer = new ProjectionBuffer();
  } catch (std::bad_alloc&) {
    std::cerr << "Memory allocation failed." << std::endl;
    assert(0);
  }
  this->add_buffer(this->projection_buffer);
}

void World::set_projection(glm::mat4 projection_matrix) {
  //ProjectionBuffer * buffer = dynamic_cast<ProjectionBuffer *>(get_buffer("projection_buffer"));
  //if(buffer == 0) {
    //Cast failed, i.e. there is no projection buffer
  //    assert(0);
  //}
  this->projection_buffer->set_projection(projection_matrix);
}

World::~World() {
  worlds.remove(this);
}

void World::action_on_worlds(GLuint tick) {
  for(auto world : worlds) {
    world->perform_action(tick);
  }
}

void World::draw_world(GLint tick, GLuint render_flag, GLuint current_program, Comparator comp) {
  for(auto camera : cameras) {
    draw_world(tick,render_flag,current_program,comp);
  }
  update_ubos_phase1();
  render(tick,render_flag,current_program,comp);
  //execute_drawing(tick,render_flag,current_program,comp);
}

/*
void World::execute_drawing(GLint tick, GLuint render_flag, GLuint current_program, Comparator comp) {
  update_ubos_phase1();
  render(tick,render_flag,current_program,comp);
  }*/
