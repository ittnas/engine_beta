#ifndef BOUNDING_GEOMETRY_HPP
#define BOUNDING_GEOMETRY_HPP

#include <vector>

#include "collisiton_object.hpp"

class BoundingGeometry {
private:
  std::vector<glm::vec4> mesh;
  CollisionObjectObject * target_object;
  GLuint position_array_index;
protected:
  virtual void translate_geometry(glm::vec3 translation) = 0;
  virtual void rotate_geometry(glm::fquat orientation) = 0;
  virtual void scale_geometry(GLfloat scale_factor) = 0;
  virtual void transform_geometry(glm::mat4 transformation) = 0;
public:
  BoundingGeometry(Object * target_object,GLuint position_array_index = 0);
  virtual ~BoundingGeometry() {}
public:
  void recalculate_mesh(); // Here should be somehow implented the inclusion of only colliding parts...
};

class BoundingSphere : public BoundingGeometry {

};

class BoundingAABB : public BoundingGeometry {

};

class BoundingOBB : public BoundingGeometry {
  
};

class BoundingPlane : public BoundingGeometry {

};

class BoundingCylinder : public BoundingGeometry {
  
};

class BoundingEllipsoid : public BoundingGeometry {

};

enum BoundingGeometryType {
  SPHERE,AABB,OBB,PLANE,CYLINDER,ELLIPSOID
};

#endif
