#include "camera.hpp"

Camera::Camera() : Object(), Movable() {
  try {
    this->view_buffer = new ViewBuffer();
    add_buffer(this->view_buffer);
  } catch (std::bad_alloc&) {
    std::cerr << "Failed to allocate memory." << std::endl;
    assert(0);
  }
}

/*
The main point of this function is to update the view_matrix and call view_buffer's update_buffer()-method to load the date into the GPU. However, it is possible to make different kinds of cameras using this method by genereating different view_matrices.
 */

void Camera::update_view_buffer() {
  // for example you can update the forward_dir-vector here.
  view_buffer->update_buffer(get_position());
}

/*
  With this function you can select where the output of the camera is rendered (framebuffer, texture, etc)
 */

void Camera::select_render_target() {} 
